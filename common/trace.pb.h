// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trace_2eproto;
namespace pb {
class CfgInfoReq;
class CfgInfoReqDefaultTypeInternal;
extern CfgInfoReqDefaultTypeInternal _CfgInfoReq_default_instance_;
class CfgInfoResp;
class CfgInfoRespDefaultTypeInternal;
extern CfgInfoRespDefaultTypeInternal _CfgInfoResp_default_instance_;
class ClearSessionReq;
class ClearSessionReqDefaultTypeInternal;
extern ClearSessionReqDefaultTypeInternal _ClearSessionReq_default_instance_;
class GetLogReq;
class GetLogReqDefaultTypeInternal;
extern GetLogReqDefaultTypeInternal _GetLogReq_default_instance_;
class GetLogResp;
class GetLogRespDefaultTypeInternal;
extern GetLogRespDefaultTypeInternal _GetLogResp_default_instance_;
class GetLogRespOld;
class GetLogRespOldDefaultTypeInternal;
extern GetLogRespOldDefaultTypeInternal _GetLogRespOld_default_instance_;
class GnsInfoReq;
class GnsInfoReqDefaultTypeInternal;
extern GnsInfoReqDefaultTypeInternal _GnsInfoReq_default_instance_;
class HeartBeatMsg;
class HeartBeatMsgDefaultTypeInternal;
extern HeartBeatMsgDefaultTypeInternal _HeartBeatMsg_default_instance_;
class LogInfo;
class LogInfoDefaultTypeInternal;
extern LogInfoDefaultTypeInternal _LogInfo_default_instance_;
class LogText;
class LogTextDefaultTypeInternal;
extern LogTextDefaultTypeInternal _LogText_default_instance_;
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginResp;
class LoginRespDefaultTypeInternal;
extern LoginRespDefaultTypeInternal _LoginResp_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::CfgInfoReq* Arena::CreateMaybeMessage<::pb::CfgInfoReq>(Arena*);
template<> ::pb::CfgInfoResp* Arena::CreateMaybeMessage<::pb::CfgInfoResp>(Arena*);
template<> ::pb::ClearSessionReq* Arena::CreateMaybeMessage<::pb::ClearSessionReq>(Arena*);
template<> ::pb::GetLogReq* Arena::CreateMaybeMessage<::pb::GetLogReq>(Arena*);
template<> ::pb::GetLogResp* Arena::CreateMaybeMessage<::pb::GetLogResp>(Arena*);
template<> ::pb::GetLogRespOld* Arena::CreateMaybeMessage<::pb::GetLogRespOld>(Arena*);
template<> ::pb::GnsInfoReq* Arena::CreateMaybeMessage<::pb::GnsInfoReq>(Arena*);
template<> ::pb::HeartBeatMsg* Arena::CreateMaybeMessage<::pb::HeartBeatMsg>(Arena*);
template<> ::pb::LogInfo* Arena::CreateMaybeMessage<::pb::LogInfo>(Arena*);
template<> ::pb::LogText* Arena::CreateMaybeMessage<::pb::LogText>(Arena*);
template<> ::pb::LoginReq* Arena::CreateMaybeMessage<::pb::LoginReq>(Arena*);
template<> ::pb::LoginResp* Arena::CreateMaybeMessage<::pb::LoginResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class LoginReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(nullptr);
  }

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LoginReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kFdFieldNumber = 3,
    kReqBeginTimeFieldNumber = 4,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 fd = 3;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 req_begin_time = 4;
  void clear_req_begin_time();
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time() const;
  void set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_begin_time() const;
  void _internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.LoginReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class LoginResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LoginResp) */ {
 public:
  LoginResp();
  virtual ~LoginResp();

  LoginResp(const LoginResp& from);
  LoginResp(LoginResp&& from) noexcept
    : LoginResp() {
    *this = ::std::move(from);
  }

  inline LoginResp& operator=(const LoginResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResp& operator=(LoginResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResp* internal_default_instance() {
    return reinterpret_cast<const LoginResp*>(
               &_LoginResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginResp& a, LoginResp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResp* New() const final {
    return CreateMaybeMessage<LoginResp>(nullptr);
  }

  LoginResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResp& from);
  void MergeFrom(const LoginResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LoginResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kRetMsgFieldNumber = 5,
    kFdFieldNumber = 2,
    kReqBeginTimeFieldNumber = 3,
    kRetFieldNumber = 4,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string ret_msg = 5;
  void clear_ret_msg();
  const std::string& ret_msg() const;
  void set_ret_msg(const std::string& value);
  void set_ret_msg(std::string&& value);
  void set_ret_msg(const char* value);
  void set_ret_msg(const char* value, size_t size);
  std::string* mutable_ret_msg();
  std::string* release_ret_msg();
  void set_allocated_ret_msg(std::string* ret_msg);
  private:
  const std::string& _internal_ret_msg() const;
  void _internal_set_ret_msg(const std::string& value);
  std::string* _internal_mutable_ret_msg();
  public:

  // int32 fd = 2;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 req_begin_time = 3;
  void clear_req_begin_time();
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time() const;
  void set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_begin_time() const;
  void _internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ret = 4;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.LoginResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class GnsInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GnsInfoReq) */ {
 public:
  GnsInfoReq();
  virtual ~GnsInfoReq();

  GnsInfoReq(const GnsInfoReq& from);
  GnsInfoReq(GnsInfoReq&& from) noexcept
    : GnsInfoReq() {
    *this = ::std::move(from);
  }

  inline GnsInfoReq& operator=(const GnsInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnsInfoReq& operator=(GnsInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnsInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnsInfoReq* internal_default_instance() {
    return reinterpret_cast<const GnsInfoReq*>(
               &_GnsInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GnsInfoReq& a, GnsInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GnsInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnsInfoReq* New() const final {
    return CreateMaybeMessage<GnsInfoReq>(nullptr);
  }

  GnsInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnsInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnsInfoReq& from);
  void MergeFrom(const GnsInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnsInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GnsInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGnsNameFieldNumber = 1,
    kIpPortFieldNumber = 2,
  };
  // repeated string gns_name = 1;
  int gns_name_size() const;
  private:
  int _internal_gns_name_size() const;
  public:
  void clear_gns_name();
  const std::string& gns_name(int index) const;
  std::string* mutable_gns_name(int index);
  void set_gns_name(int index, const std::string& value);
  void set_gns_name(int index, std::string&& value);
  void set_gns_name(int index, const char* value);
  void set_gns_name(int index, const char* value, size_t size);
  std::string* add_gns_name();
  void add_gns_name(const std::string& value);
  void add_gns_name(std::string&& value);
  void add_gns_name(const char* value);
  void add_gns_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& gns_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_gns_name();
  private:
  const std::string& _internal_gns_name(int index) const;
  std::string* _internal_add_gns_name();
  public:

  // repeated string ip_port = 2;
  int ip_port_size() const;
  private:
  int _internal_ip_port_size() const;
  public:
  void clear_ip_port();
  const std::string& ip_port(int index) const;
  std::string* mutable_ip_port(int index);
  void set_ip_port(int index, const std::string& value);
  void set_ip_port(int index, std::string&& value);
  void set_ip_port(int index, const char* value);
  void set_ip_port(int index, const char* value, size_t size);
  std::string* add_ip_port();
  void add_ip_port(const std::string& value);
  void add_ip_port(std::string&& value);
  void add_ip_port(const char* value);
  void add_ip_port(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ip_port() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ip_port();
  private:
  const std::string& _internal_ip_port(int index) const;
  std::string* _internal_add_ip_port();
  public:

  // @@protoc_insertion_point(class_scope:pb.GnsInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> gns_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ip_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class CfgInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CfgInfoReq) */ {
 public:
  CfgInfoReq();
  virtual ~CfgInfoReq();

  CfgInfoReq(const CfgInfoReq& from);
  CfgInfoReq(CfgInfoReq&& from) noexcept
    : CfgInfoReq() {
    *this = ::std::move(from);
  }

  inline CfgInfoReq& operator=(const CfgInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CfgInfoReq& operator=(CfgInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CfgInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CfgInfoReq* internal_default_instance() {
    return reinterpret_cast<const CfgInfoReq*>(
               &_CfgInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CfgInfoReq& a, CfgInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CfgInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CfgInfoReq* New() const final {
    return CreateMaybeMessage<CfgInfoReq>(nullptr);
  }

  CfgInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CfgInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CfgInfoReq& from);
  void MergeFrom(const CfgInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CfgInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CfgInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kP3FieldNumber = 4,
    kGnsNameFieldNumber = 5,
    kIpPortFieldNumber = 6,
    kP2FieldNumber = 3,
    kP1FieldNumber = 2,
    kFdFieldNumber = 7,
    kReqBeginTimeFieldNumber = 8,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string p3 = 4;
  void clear_p3();
  const std::string& p3() const;
  void set_p3(const std::string& value);
  void set_p3(std::string&& value);
  void set_p3(const char* value);
  void set_p3(const char* value, size_t size);
  std::string* mutable_p3();
  std::string* release_p3();
  void set_allocated_p3(std::string* p3);
  private:
  const std::string& _internal_p3() const;
  void _internal_set_p3(const std::string& value);
  std::string* _internal_mutable_p3();
  public:

  // string gns_name = 5;
  void clear_gns_name();
  const std::string& gns_name() const;
  void set_gns_name(const std::string& value);
  void set_gns_name(std::string&& value);
  void set_gns_name(const char* value);
  void set_gns_name(const char* value, size_t size);
  std::string* mutable_gns_name();
  std::string* release_gns_name();
  void set_allocated_gns_name(std::string* gns_name);
  private:
  const std::string& _internal_gns_name() const;
  void _internal_set_gns_name(const std::string& value);
  std::string* _internal_mutable_gns_name();
  public:

  // string ip_port = 6;
  void clear_ip_port();
  const std::string& ip_port() const;
  void set_ip_port(const std::string& value);
  void set_ip_port(std::string&& value);
  void set_ip_port(const char* value);
  void set_ip_port(const char* value, size_t size);
  std::string* mutable_ip_port();
  std::string* release_ip_port();
  void set_allocated_ip_port(std::string* ip_port);
  private:
  const std::string& _internal_ip_port() const;
  void _internal_set_ip_port(const std::string& value);
  std::string* _internal_mutable_ip_port();
  public:

  // int64 p2 = 3;
  void clear_p2();
  ::PROTOBUF_NAMESPACE_ID::int64 p2() const;
  void set_p2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_p2() const;
  void _internal_set_p2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 p1 = 2;
  void clear_p1();
  ::PROTOBUF_NAMESPACE_ID::int32 p1() const;
  void set_p1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_p1() const;
  void _internal_set_p1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fd = 7;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 req_begin_time = 8;
  void clear_req_begin_time();
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time() const;
  void set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_begin_time() const;
  void _internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CfgInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gns_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_port_;
  ::PROTOBUF_NAMESPACE_ID::int64 p2_;
  ::PROTOBUF_NAMESPACE_ID::int32 p1_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class CfgInfoResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.CfgInfoResp) */ {
 public:
  CfgInfoResp();
  virtual ~CfgInfoResp();

  CfgInfoResp(const CfgInfoResp& from);
  CfgInfoResp(CfgInfoResp&& from) noexcept
    : CfgInfoResp() {
    *this = ::std::move(from);
  }

  inline CfgInfoResp& operator=(const CfgInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CfgInfoResp& operator=(CfgInfoResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CfgInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CfgInfoResp* internal_default_instance() {
    return reinterpret_cast<const CfgInfoResp*>(
               &_CfgInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CfgInfoResp& a, CfgInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CfgInfoResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CfgInfoResp* New() const final {
    return CreateMaybeMessage<CfgInfoResp>(nullptr);
  }

  CfgInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CfgInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CfgInfoResp& from);
  void MergeFrom(const CfgInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CfgInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.CfgInfoResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetMsgFieldNumber = 2,
    kRetFieldNumber = 1,
    kFdFieldNumber = 3,
    kReqBeginTimeFieldNumber = 4,
  };
  // string ret_msg = 2;
  void clear_ret_msg();
  const std::string& ret_msg() const;
  void set_ret_msg(const std::string& value);
  void set_ret_msg(std::string&& value);
  void set_ret_msg(const char* value);
  void set_ret_msg(const char* value, size_t size);
  std::string* mutable_ret_msg();
  std::string* release_ret_msg();
  void set_allocated_ret_msg(std::string* ret_msg);
  private:
  const std::string& _internal_ret_msg() const;
  void _internal_set_ret_msg(const std::string& value);
  std::string* _internal_mutable_ret_msg();
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fd = 3;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 req_begin_time = 4;
  void clear_req_begin_time();
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time() const;
  void set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_begin_time() const;
  void _internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.CfgInfoResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class LogInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LogInfo) */ {
 public:
  LogInfo();
  virtual ~LogInfo();

  LogInfo(const LogInfo& from);
  LogInfo(LogInfo&& from) noexcept
    : LogInfo() {
    *this = ::std::move(from);
  }

  inline LogInfo& operator=(const LogInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogInfo& operator=(LogInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogInfo* internal_default_instance() {
    return reinterpret_cast<const LogInfo*>(
               &_LogInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LogInfo& a, LogInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LogInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogInfo* New() const final {
    return CreateMaybeMessage<LogInfo>(nullptr);
  }

  LogInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogInfo& from);
  void MergeFrom(const LogInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LogInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGnsNameFieldNumber = 1,
    kIpPortFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kLogTextFieldNumber = 4,
  };
  // string gns_name = 1;
  void clear_gns_name();
  const std::string& gns_name() const;
  void set_gns_name(const std::string& value);
  void set_gns_name(std::string&& value);
  void set_gns_name(const char* value);
  void set_gns_name(const char* value, size_t size);
  std::string* mutable_gns_name();
  std::string* release_gns_name();
  void set_allocated_gns_name(std::string* gns_name);
  private:
  const std::string& _internal_gns_name() const;
  void _internal_set_gns_name(const std::string& value);
  std::string* _internal_mutable_gns_name();
  public:

  // string ip_port = 2;
  void clear_ip_port();
  const std::string& ip_port() const;
  void set_ip_port(const std::string& value);
  void set_ip_port(std::string&& value);
  void set_ip_port(const char* value);
  void set_ip_port(const char* value, size_t size);
  std::string* mutable_ip_port();
  std::string* release_ip_port();
  void set_allocated_ip_port(std::string* ip_port);
  private:
  const std::string& _internal_ip_port() const;
  void _internal_set_ip_port(const std::string& value);
  std::string* _internal_mutable_ip_port();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string log_text = 4;
  void clear_log_text();
  const std::string& log_text() const;
  void set_log_text(const std::string& value);
  void set_log_text(std::string&& value);
  void set_log_text(const char* value);
  void set_log_text(const char* value, size_t size);
  std::string* mutable_log_text();
  std::string* release_log_text();
  void set_allocated_log_text(std::string* log_text);
  private:
  const std::string& _internal_log_text() const;
  void _internal_set_log_text(const std::string& value);
  std::string* _internal_mutable_log_text();
  public:

  // @@protoc_insertion_point(class_scope:pb.LogInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gns_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class GetLogReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetLogReq) */ {
 public:
  GetLogReq();
  virtual ~GetLogReq();

  GetLogReq(const GetLogReq& from);
  GetLogReq(GetLogReq&& from) noexcept
    : GetLogReq() {
    *this = ::std::move(from);
  }

  inline GetLogReq& operator=(const GetLogReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogReq& operator=(GetLogReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLogReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLogReq* internal_default_instance() {
    return reinterpret_cast<const GetLogReq*>(
               &_GetLogReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetLogReq& a, GetLogReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogReq* New() const final {
    return CreateMaybeMessage<GetLogReq>(nullptr);
  }

  GetLogReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLogReq& from);
  void MergeFrom(const GetLogReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetLogReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kGnsNameFieldNumber = 2,
    kIpPortFieldNumber = 3,
    kSeqFieldNumber = 4,
    kFdFieldNumber = 5,
    kReqBeginTimeFieldNumber = 6,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string gns_name = 2;
  void clear_gns_name();
  const std::string& gns_name() const;
  void set_gns_name(const std::string& value);
  void set_gns_name(std::string&& value);
  void set_gns_name(const char* value);
  void set_gns_name(const char* value, size_t size);
  std::string* mutable_gns_name();
  std::string* release_gns_name();
  void set_allocated_gns_name(std::string* gns_name);
  private:
  const std::string& _internal_gns_name() const;
  void _internal_set_gns_name(const std::string& value);
  std::string* _internal_mutable_gns_name();
  public:

  // string ip_port = 3;
  void clear_ip_port();
  const std::string& ip_port() const;
  void set_ip_port(const std::string& value);
  void set_ip_port(std::string&& value);
  void set_ip_port(const char* value);
  void set_ip_port(const char* value, size_t size);
  std::string* mutable_ip_port();
  std::string* release_ip_port();
  void set_allocated_ip_port(std::string* ip_port);
  private:
  const std::string& _internal_ip_port() const;
  void _internal_set_ip_port(const std::string& value);
  std::string* _internal_mutable_ip_port();
  public:

  // int32 seq = 4;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fd = 5;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 req_begin_time = 6;
  void clear_req_begin_time();
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time() const;
  void set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_begin_time() const;
  void _internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GetLogReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gns_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class GetLogRespOld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetLogRespOld) */ {
 public:
  GetLogRespOld();
  virtual ~GetLogRespOld();

  GetLogRespOld(const GetLogRespOld& from);
  GetLogRespOld(GetLogRespOld&& from) noexcept
    : GetLogRespOld() {
    *this = ::std::move(from);
  }

  inline GetLogRespOld& operator=(const GetLogRespOld& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogRespOld& operator=(GetLogRespOld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLogRespOld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLogRespOld* internal_default_instance() {
    return reinterpret_cast<const GetLogRespOld*>(
               &_GetLogRespOld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetLogRespOld& a, GetLogRespOld& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogRespOld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogRespOld* New() const final {
    return CreateMaybeMessage<GetLogRespOld>(nullptr);
  }

  GetLogRespOld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogRespOld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLogRespOld& from);
  void MergeFrom(const GetLogRespOld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogRespOld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetLogRespOld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetMsgFieldNumber = 2,
    kLogTextFieldNumber = 3,
    kRetFieldNumber = 1,
    kCurLenFieldNumber = 4,
    kFdFieldNumber = 5,
    kReqBeginTimeFieldNumber = 6,
  };
  // string ret_msg = 2;
  void clear_ret_msg();
  const std::string& ret_msg() const;
  void set_ret_msg(const std::string& value);
  void set_ret_msg(std::string&& value);
  void set_ret_msg(const char* value);
  void set_ret_msg(const char* value, size_t size);
  std::string* mutable_ret_msg();
  std::string* release_ret_msg();
  void set_allocated_ret_msg(std::string* ret_msg);
  private:
  const std::string& _internal_ret_msg() const;
  void _internal_set_ret_msg(const std::string& value);
  std::string* _internal_mutable_ret_msg();
  public:

  // string log_text = 3;
  void clear_log_text();
  const std::string& log_text() const;
  void set_log_text(const std::string& value);
  void set_log_text(std::string&& value);
  void set_log_text(const char* value);
  void set_log_text(const char* value, size_t size);
  std::string* mutable_log_text();
  std::string* release_log_text();
  void set_allocated_log_text(std::string* log_text);
  private:
  const std::string& _internal_log_text() const;
  void _internal_set_log_text(const std::string& value);
  std::string* _internal_mutable_log_text();
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur_len = 4;
  void clear_cur_len();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_len() const;
  void set_cur_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_len() const;
  void _internal_set_cur_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fd = 5;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 req_begin_time = 6;
  void clear_req_begin_time();
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time() const;
  void set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_begin_time() const;
  void _internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GetLogRespOld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_text_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_len_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class LogText :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LogText) */ {
 public:
  LogText();
  virtual ~LogText();

  LogText(const LogText& from);
  LogText(LogText&& from) noexcept
    : LogText() {
    *this = ::std::move(from);
  }

  inline LogText& operator=(const LogText& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogText& operator=(LogText&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogText& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogText* internal_default_instance() {
    return reinterpret_cast<const LogText*>(
               &_LogText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LogText& a, LogText& b) {
    a.Swap(&b);
  }
  inline void Swap(LogText* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogText* New() const final {
    return CreateMaybeMessage<LogText>(nullptr);
  }

  LogText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogText>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogText& from);
  void MergeFrom(const LogText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LogText";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 3,
    kIpPortFieldNumber = 1,
    kGnsNameFieldNumber = 2,
  };
  // repeated string text = 3;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text();
  private:
  const std::string& _internal_text(int index) const;
  std::string* _internal_add_text();
  public:

  // string ip_port = 1;
  void clear_ip_port();
  const std::string& ip_port() const;
  void set_ip_port(const std::string& value);
  void set_ip_port(std::string&& value);
  void set_ip_port(const char* value);
  void set_ip_port(const char* value, size_t size);
  std::string* mutable_ip_port();
  std::string* release_ip_port();
  void set_allocated_ip_port(std::string* ip_port);
  private:
  const std::string& _internal_ip_port() const;
  void _internal_set_ip_port(const std::string& value);
  std::string* _internal_mutable_ip_port();
  public:

  // string gns_name = 2;
  void clear_gns_name();
  const std::string& gns_name() const;
  void set_gns_name(const std::string& value);
  void set_gns_name(std::string&& value);
  void set_gns_name(const char* value);
  void set_gns_name(const char* value, size_t size);
  std::string* mutable_gns_name();
  std::string* release_gns_name();
  void set_allocated_gns_name(std::string* gns_name);
  private:
  const std::string& _internal_gns_name() const;
  void _internal_set_gns_name(const std::string& value);
  std::string* _internal_mutable_gns_name();
  public:

  // @@protoc_insertion_point(class_scope:pb.LogText)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gns_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class GetLogResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GetLogResp) */ {
 public:
  GetLogResp();
  virtual ~GetLogResp();

  GetLogResp(const GetLogResp& from);
  GetLogResp(GetLogResp&& from) noexcept
    : GetLogResp() {
    *this = ::std::move(from);
  }

  inline GetLogResp& operator=(const GetLogResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogResp& operator=(GetLogResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLogResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLogResp* internal_default_instance() {
    return reinterpret_cast<const GetLogResp*>(
               &_GetLogResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetLogResp& a, GetLogResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLogResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLogResp* New() const final {
    return CreateMaybeMessage<GetLogResp>(nullptr);
  }

  GetLogResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLogResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLogResp& from);
  void MergeFrom(const GetLogResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLogResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GetLogResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogTextFieldNumber = 5,
    kRetMsgFieldNumber = 2,
    kRetFieldNumber = 1,
    kFdFieldNumber = 3,
    kReqBeginTimeFieldNumber = 4,
  };
  // repeated .pb.LogText log_text = 5;
  int log_text_size() const;
  private:
  int _internal_log_text_size() const;
  public:
  void clear_log_text();
  ::pb::LogText* mutable_log_text(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogText >*
      mutable_log_text();
  private:
  const ::pb::LogText& _internal_log_text(int index) const;
  ::pb::LogText* _internal_add_log_text();
  public:
  const ::pb::LogText& log_text(int index) const;
  ::pb::LogText* add_log_text();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogText >&
      log_text() const;

  // string ret_msg = 2;
  void clear_ret_msg();
  const std::string& ret_msg() const;
  void set_ret_msg(const std::string& value);
  void set_ret_msg(std::string&& value);
  void set_ret_msg(const char* value);
  void set_ret_msg(const char* value, size_t size);
  std::string* mutable_ret_msg();
  std::string* release_ret_msg();
  void set_allocated_ret_msg(std::string* ret_msg);
  private:
  const std::string& _internal_ret_msg() const;
  void _internal_set_ret_msg(const std::string& value);
  std::string* _internal_mutable_ret_msg();
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fd = 3;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 req_begin_time = 4;
  void clear_req_begin_time();
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time() const;
  void set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_begin_time() const;
  void _internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GetLogResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogText > log_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_begin_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.HeartBeatMsg) */ {
 public:
  HeartBeatMsg();
  virtual ~HeartBeatMsg();

  HeartBeatMsg(const HeartBeatMsg& from);
  HeartBeatMsg(HeartBeatMsg&& from) noexcept
    : HeartBeatMsg() {
    *this = ::std::move(from);
  }

  inline HeartBeatMsg& operator=(const HeartBeatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatMsg& operator=(HeartBeatMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartBeatMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartBeatMsg* internal_default_instance() {
    return reinterpret_cast<const HeartBeatMsg*>(
               &_HeartBeatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HeartBeatMsg& a, HeartBeatMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartBeatMsg* New() const final {
    return CreateMaybeMessage<HeartBeatMsg>(nullptr);
  }

  HeartBeatMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartBeatMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartBeatMsg& from);
  void MergeFrom(const HeartBeatMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.HeartBeatMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReserveFieldNumber = 1,
  };
  // string reserve = 1;
  void clear_reserve();
  const std::string& reserve() const;
  void set_reserve(const std::string& value);
  void set_reserve(std::string&& value);
  void set_reserve(const char* value);
  void set_reserve(const char* value, size_t size);
  std::string* mutable_reserve();
  std::string* release_reserve();
  void set_allocated_reserve(std::string* reserve);
  private:
  const std::string& _internal_reserve() const;
  void _internal_set_reserve(const std::string& value);
  std::string* _internal_mutable_reserve();
  public:

  // @@protoc_insertion_point(class_scope:pb.HeartBeatMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class ClearSessionReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ClearSessionReq) */ {
 public:
  ClearSessionReq();
  virtual ~ClearSessionReq();

  ClearSessionReq(const ClearSessionReq& from);
  ClearSessionReq(ClearSessionReq&& from) noexcept
    : ClearSessionReq() {
    *this = ::std::move(from);
  }

  inline ClearSessionReq& operator=(const ClearSessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearSessionReq& operator=(ClearSessionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearSessionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearSessionReq* internal_default_instance() {
    return reinterpret_cast<const ClearSessionReq*>(
               &_ClearSessionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ClearSessionReq& a, ClearSessionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearSessionReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearSessionReq* New() const final {
    return CreateMaybeMessage<ClearSessionReq>(nullptr);
  }

  ClearSessionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearSessionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearSessionReq& from);
  void MergeFrom(const ClearSessionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearSessionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ClearSessionReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:pb.ClearSessionReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginReq

// string user_name = 1;
inline void LoginReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:pb.LoginReq.user_name)
  return _internal_user_name();
}
inline void LoginReq::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:pb.LoginReq.user_name)
}
inline std::string* LoginReq::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:pb.LoginReq.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& LoginReq::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void LoginReq::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReq::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LoginReq.user_name)
}
inline void LoginReq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LoginReq.user_name)
}
inline void LoginReq::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LoginReq.user_name)
}
inline std::string* LoginReq::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_user_name() {
  // @@protoc_insertion_point(field_release:pb.LoginReq.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:pb.LoginReq.user_name)
}

// string password = 2;
inline void LoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:pb.LoginReq.password)
  return _internal_password();
}
inline void LoginReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:pb.LoginReq.password)
}
inline std::string* LoginReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:pb.LoginReq.password)
  return _internal_mutable_password();
}
inline const std::string& LoginReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void LoginReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LoginReq.password)
}
inline void LoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LoginReq.password)
}
inline void LoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LoginReq.password)
}
inline std::string* LoginReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:pb.LoginReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:pb.LoginReq.password)
}

// int32 fd = 3;
inline void LoginReq::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReq::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReq::fd() const {
  // @@protoc_insertion_point(field_get:pb.LoginReq.fd)
  return _internal_fd();
}
inline void LoginReq::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void LoginReq::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:pb.LoginReq.fd)
}

// int32 req_begin_time = 4;
inline void LoginReq::clear_req_begin_time() {
  req_begin_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReq::_internal_req_begin_time() const {
  return req_begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReq::req_begin_time() const {
  // @@protoc_insertion_point(field_get:pb.LoginReq.req_begin_time)
  return _internal_req_begin_time();
}
inline void LoginReq::_internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_begin_time_ = value;
}
inline void LoginReq::set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_begin_time(value);
  // @@protoc_insertion_point(field_set:pb.LoginReq.req_begin_time)
}

// -------------------------------------------------------------------

// LoginResp

// string session_id = 1;
inline void LoginResp::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginResp::session_id() const {
  // @@protoc_insertion_point(field_get:pb.LoginResp.session_id)
  return _internal_session_id();
}
inline void LoginResp::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:pb.LoginResp.session_id)
}
inline std::string* LoginResp::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:pb.LoginResp.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& LoginResp::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void LoginResp::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginResp::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LoginResp.session_id)
}
inline void LoginResp::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LoginResp.session_id)
}
inline void LoginResp::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LoginResp.session_id)
}
inline std::string* LoginResp::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResp::release_session_id() {
  // @@protoc_insertion_point(field_release:pb.LoginResp.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResp::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:pb.LoginResp.session_id)
}

// int32 fd = 2;
inline void LoginResp::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResp::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResp::fd() const {
  // @@protoc_insertion_point(field_get:pb.LoginResp.fd)
  return _internal_fd();
}
inline void LoginResp::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void LoginResp::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:pb.LoginResp.fd)
}

// int32 req_begin_time = 3;
inline void LoginResp::clear_req_begin_time() {
  req_begin_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResp::_internal_req_begin_time() const {
  return req_begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResp::req_begin_time() const {
  // @@protoc_insertion_point(field_get:pb.LoginResp.req_begin_time)
  return _internal_req_begin_time();
}
inline void LoginResp::_internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_begin_time_ = value;
}
inline void LoginResp::set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_begin_time(value);
  // @@protoc_insertion_point(field_set:pb.LoginResp.req_begin_time)
}

// int32 ret = 4;
inline void LoginResp::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResp::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginResp::ret() const {
  // @@protoc_insertion_point(field_get:pb.LoginResp.ret)
  return _internal_ret();
}
inline void LoginResp::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void LoginResp::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:pb.LoginResp.ret)
}

// string ret_msg = 5;
inline void LoginResp::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginResp::ret_msg() const {
  // @@protoc_insertion_point(field_get:pb.LoginResp.ret_msg)
  return _internal_ret_msg();
}
inline void LoginResp::set_ret_msg(const std::string& value) {
  _internal_set_ret_msg(value);
  // @@protoc_insertion_point(field_set:pb.LoginResp.ret_msg)
}
inline std::string* LoginResp::mutable_ret_msg() {
  // @@protoc_insertion_point(field_mutable:pb.LoginResp.ret_msg)
  return _internal_mutable_ret_msg();
}
inline const std::string& LoginResp::_internal_ret_msg() const {
  return ret_msg_.GetNoArena();
}
inline void LoginResp::_internal_set_ret_msg(const std::string& value) {
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginResp::set_ret_msg(std::string&& value) {
  
  ret_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LoginResp.ret_msg)
}
inline void LoginResp::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LoginResp.ret_msg)
}
inline void LoginResp::set_ret_msg(const char* value, size_t size) {
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LoginResp.ret_msg)
}
inline std::string* LoginResp::_internal_mutable_ret_msg() {
  
  return ret_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResp::release_ret_msg() {
  // @@protoc_insertion_point(field_release:pb.LoginResp.ret_msg)
  
  return ret_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResp::set_allocated_ret_msg(std::string* ret_msg) {
  if (ret_msg != nullptr) {
    
  } else {
    
  }
  ret_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.LoginResp.ret_msg)
}

// -------------------------------------------------------------------

// GnsInfoReq

// repeated string gns_name = 1;
inline int GnsInfoReq::_internal_gns_name_size() const {
  return gns_name_.size();
}
inline int GnsInfoReq::gns_name_size() const {
  return _internal_gns_name_size();
}
inline void GnsInfoReq::clear_gns_name() {
  gns_name_.Clear();
}
inline std::string* GnsInfoReq::add_gns_name() {
  // @@protoc_insertion_point(field_add_mutable:pb.GnsInfoReq.gns_name)
  return _internal_add_gns_name();
}
inline const std::string& GnsInfoReq::_internal_gns_name(int index) const {
  return gns_name_.Get(index);
}
inline const std::string& GnsInfoReq::gns_name(int index) const {
  // @@protoc_insertion_point(field_get:pb.GnsInfoReq.gns_name)
  return _internal_gns_name(index);
}
inline std::string* GnsInfoReq::mutable_gns_name(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GnsInfoReq.gns_name)
  return gns_name_.Mutable(index);
}
inline void GnsInfoReq::set_gns_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.GnsInfoReq.gns_name)
  gns_name_.Mutable(index)->assign(value);
}
inline void GnsInfoReq::set_gns_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GnsInfoReq.gns_name)
  gns_name_.Mutable(index)->assign(std::move(value));
}
inline void GnsInfoReq::set_gns_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gns_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.GnsInfoReq.gns_name)
}
inline void GnsInfoReq::set_gns_name(int index, const char* value, size_t size) {
  gns_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.GnsInfoReq.gns_name)
}
inline std::string* GnsInfoReq::_internal_add_gns_name() {
  return gns_name_.Add();
}
inline void GnsInfoReq::add_gns_name(const std::string& value) {
  gns_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.GnsInfoReq.gns_name)
}
inline void GnsInfoReq::add_gns_name(std::string&& value) {
  gns_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.GnsInfoReq.gns_name)
}
inline void GnsInfoReq::add_gns_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gns_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.GnsInfoReq.gns_name)
}
inline void GnsInfoReq::add_gns_name(const char* value, size_t size) {
  gns_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.GnsInfoReq.gns_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GnsInfoReq::gns_name() const {
  // @@protoc_insertion_point(field_list:pb.GnsInfoReq.gns_name)
  return gns_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GnsInfoReq::mutable_gns_name() {
  // @@protoc_insertion_point(field_mutable_list:pb.GnsInfoReq.gns_name)
  return &gns_name_;
}

// repeated string ip_port = 2;
inline int GnsInfoReq::_internal_ip_port_size() const {
  return ip_port_.size();
}
inline int GnsInfoReq::ip_port_size() const {
  return _internal_ip_port_size();
}
inline void GnsInfoReq::clear_ip_port() {
  ip_port_.Clear();
}
inline std::string* GnsInfoReq::add_ip_port() {
  // @@protoc_insertion_point(field_add_mutable:pb.GnsInfoReq.ip_port)
  return _internal_add_ip_port();
}
inline const std::string& GnsInfoReq::_internal_ip_port(int index) const {
  return ip_port_.Get(index);
}
inline const std::string& GnsInfoReq::ip_port(int index) const {
  // @@protoc_insertion_point(field_get:pb.GnsInfoReq.ip_port)
  return _internal_ip_port(index);
}
inline std::string* GnsInfoReq::mutable_ip_port(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GnsInfoReq.ip_port)
  return ip_port_.Mutable(index);
}
inline void GnsInfoReq::set_ip_port(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.GnsInfoReq.ip_port)
  ip_port_.Mutable(index)->assign(value);
}
inline void GnsInfoReq::set_ip_port(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GnsInfoReq.ip_port)
  ip_port_.Mutable(index)->assign(std::move(value));
}
inline void GnsInfoReq::set_ip_port(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_port_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.GnsInfoReq.ip_port)
}
inline void GnsInfoReq::set_ip_port(int index, const char* value, size_t size) {
  ip_port_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.GnsInfoReq.ip_port)
}
inline std::string* GnsInfoReq::_internal_add_ip_port() {
  return ip_port_.Add();
}
inline void GnsInfoReq::add_ip_port(const std::string& value) {
  ip_port_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.GnsInfoReq.ip_port)
}
inline void GnsInfoReq::add_ip_port(std::string&& value) {
  ip_port_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.GnsInfoReq.ip_port)
}
inline void GnsInfoReq::add_ip_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_port_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.GnsInfoReq.ip_port)
}
inline void GnsInfoReq::add_ip_port(const char* value, size_t size) {
  ip_port_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.GnsInfoReq.ip_port)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GnsInfoReq::ip_port() const {
  // @@protoc_insertion_point(field_list:pb.GnsInfoReq.ip_port)
  return ip_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GnsInfoReq::mutable_ip_port() {
  // @@protoc_insertion_point(field_mutable_list:pb.GnsInfoReq.ip_port)
  return &ip_port_;
}

// -------------------------------------------------------------------

// CfgInfoReq

// string session_id = 1;
inline void CfgInfoReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CfgInfoReq::session_id() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoReq.session_id)
  return _internal_session_id();
}
inline void CfgInfoReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoReq.session_id)
}
inline std::string* CfgInfoReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:pb.CfgInfoReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& CfgInfoReq::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void CfgInfoReq::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CfgInfoReq::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CfgInfoReq.session_id)
}
inline void CfgInfoReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CfgInfoReq.session_id)
}
inline void CfgInfoReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CfgInfoReq.session_id)
}
inline std::string* CfgInfoReq::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CfgInfoReq::release_session_id() {
  // @@protoc_insertion_point(field_release:pb.CfgInfoReq.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CfgInfoReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CfgInfoReq.session_id)
}

// int32 p1 = 2;
inline void CfgInfoReq::clear_p1() {
  p1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoReq::_internal_p1() const {
  return p1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoReq::p1() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoReq.p1)
  return _internal_p1();
}
inline void CfgInfoReq::_internal_set_p1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  p1_ = value;
}
inline void CfgInfoReq::set_p1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_p1(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoReq.p1)
}

// int64 p2 = 3;
inline void CfgInfoReq::clear_p2() {
  p2_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CfgInfoReq::_internal_p2() const {
  return p2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CfgInfoReq::p2() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoReq.p2)
  return _internal_p2();
}
inline void CfgInfoReq::_internal_set_p2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  p2_ = value;
}
inline void CfgInfoReq::set_p2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_p2(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoReq.p2)
}

// string p3 = 4;
inline void CfgInfoReq::clear_p3() {
  p3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CfgInfoReq::p3() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoReq.p3)
  return _internal_p3();
}
inline void CfgInfoReq::set_p3(const std::string& value) {
  _internal_set_p3(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoReq.p3)
}
inline std::string* CfgInfoReq::mutable_p3() {
  // @@protoc_insertion_point(field_mutable:pb.CfgInfoReq.p3)
  return _internal_mutable_p3();
}
inline const std::string& CfgInfoReq::_internal_p3() const {
  return p3_.GetNoArena();
}
inline void CfgInfoReq::_internal_set_p3(const std::string& value) {
  
  p3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CfgInfoReq::set_p3(std::string&& value) {
  
  p3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CfgInfoReq.p3)
}
inline void CfgInfoReq::set_p3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  p3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CfgInfoReq.p3)
}
inline void CfgInfoReq::set_p3(const char* value, size_t size) {
  
  p3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CfgInfoReq.p3)
}
inline std::string* CfgInfoReq::_internal_mutable_p3() {
  
  return p3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CfgInfoReq::release_p3() {
  // @@protoc_insertion_point(field_release:pb.CfgInfoReq.p3)
  
  return p3_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CfgInfoReq::set_allocated_p3(std::string* p3) {
  if (p3 != nullptr) {
    
  } else {
    
  }
  p3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), p3);
  // @@protoc_insertion_point(field_set_allocated:pb.CfgInfoReq.p3)
}

// string gns_name = 5;
inline void CfgInfoReq::clear_gns_name() {
  gns_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CfgInfoReq::gns_name() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoReq.gns_name)
  return _internal_gns_name();
}
inline void CfgInfoReq::set_gns_name(const std::string& value) {
  _internal_set_gns_name(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoReq.gns_name)
}
inline std::string* CfgInfoReq::mutable_gns_name() {
  // @@protoc_insertion_point(field_mutable:pb.CfgInfoReq.gns_name)
  return _internal_mutable_gns_name();
}
inline const std::string& CfgInfoReq::_internal_gns_name() const {
  return gns_name_.GetNoArena();
}
inline void CfgInfoReq::_internal_set_gns_name(const std::string& value) {
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CfgInfoReq::set_gns_name(std::string&& value) {
  
  gns_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CfgInfoReq.gns_name)
}
inline void CfgInfoReq::set_gns_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CfgInfoReq.gns_name)
}
inline void CfgInfoReq::set_gns_name(const char* value, size_t size) {
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CfgInfoReq.gns_name)
}
inline std::string* CfgInfoReq::_internal_mutable_gns_name() {
  
  return gns_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CfgInfoReq::release_gns_name() {
  // @@protoc_insertion_point(field_release:pb.CfgInfoReq.gns_name)
  
  return gns_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CfgInfoReq::set_allocated_gns_name(std::string* gns_name) {
  if (gns_name != nullptr) {
    
  } else {
    
  }
  gns_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gns_name);
  // @@protoc_insertion_point(field_set_allocated:pb.CfgInfoReq.gns_name)
}

// string ip_port = 6;
inline void CfgInfoReq::clear_ip_port() {
  ip_port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CfgInfoReq::ip_port() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoReq.ip_port)
  return _internal_ip_port();
}
inline void CfgInfoReq::set_ip_port(const std::string& value) {
  _internal_set_ip_port(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoReq.ip_port)
}
inline std::string* CfgInfoReq::mutable_ip_port() {
  // @@protoc_insertion_point(field_mutable:pb.CfgInfoReq.ip_port)
  return _internal_mutable_ip_port();
}
inline const std::string& CfgInfoReq::_internal_ip_port() const {
  return ip_port_.GetNoArena();
}
inline void CfgInfoReq::_internal_set_ip_port(const std::string& value) {
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CfgInfoReq::set_ip_port(std::string&& value) {
  
  ip_port_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CfgInfoReq.ip_port)
}
inline void CfgInfoReq::set_ip_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CfgInfoReq.ip_port)
}
inline void CfgInfoReq::set_ip_port(const char* value, size_t size) {
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CfgInfoReq.ip_port)
}
inline std::string* CfgInfoReq::_internal_mutable_ip_port() {
  
  return ip_port_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CfgInfoReq::release_ip_port() {
  // @@protoc_insertion_point(field_release:pb.CfgInfoReq.ip_port)
  
  return ip_port_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CfgInfoReq::set_allocated_ip_port(std::string* ip_port) {
  if (ip_port != nullptr) {
    
  } else {
    
  }
  ip_port_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_port);
  // @@protoc_insertion_point(field_set_allocated:pb.CfgInfoReq.ip_port)
}

// int32 fd = 7;
inline void CfgInfoReq::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoReq::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoReq::fd() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoReq.fd)
  return _internal_fd();
}
inline void CfgInfoReq::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void CfgInfoReq::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoReq.fd)
}

// int32 req_begin_time = 8;
inline void CfgInfoReq::clear_req_begin_time() {
  req_begin_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoReq::_internal_req_begin_time() const {
  return req_begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoReq::req_begin_time() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoReq.req_begin_time)
  return _internal_req_begin_time();
}
inline void CfgInfoReq::_internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_begin_time_ = value;
}
inline void CfgInfoReq::set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_begin_time(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoReq.req_begin_time)
}

// -------------------------------------------------------------------

// CfgInfoResp

// int32 ret = 1;
inline void CfgInfoResp::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoResp::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoResp::ret() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoResp.ret)
  return _internal_ret();
}
inline void CfgInfoResp::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void CfgInfoResp::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoResp.ret)
}

// string ret_msg = 2;
inline void CfgInfoResp::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CfgInfoResp::ret_msg() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoResp.ret_msg)
  return _internal_ret_msg();
}
inline void CfgInfoResp::set_ret_msg(const std::string& value) {
  _internal_set_ret_msg(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoResp.ret_msg)
}
inline std::string* CfgInfoResp::mutable_ret_msg() {
  // @@protoc_insertion_point(field_mutable:pb.CfgInfoResp.ret_msg)
  return _internal_mutable_ret_msg();
}
inline const std::string& CfgInfoResp::_internal_ret_msg() const {
  return ret_msg_.GetNoArena();
}
inline void CfgInfoResp::_internal_set_ret_msg(const std::string& value) {
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CfgInfoResp::set_ret_msg(std::string&& value) {
  
  ret_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CfgInfoResp.ret_msg)
}
inline void CfgInfoResp::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CfgInfoResp.ret_msg)
}
inline void CfgInfoResp::set_ret_msg(const char* value, size_t size) {
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CfgInfoResp.ret_msg)
}
inline std::string* CfgInfoResp::_internal_mutable_ret_msg() {
  
  return ret_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CfgInfoResp::release_ret_msg() {
  // @@protoc_insertion_point(field_release:pb.CfgInfoResp.ret_msg)
  
  return ret_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CfgInfoResp::set_allocated_ret_msg(std::string* ret_msg) {
  if (ret_msg != nullptr) {
    
  } else {
    
  }
  ret_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.CfgInfoResp.ret_msg)
}

// int32 fd = 3;
inline void CfgInfoResp::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoResp::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoResp::fd() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoResp.fd)
  return _internal_fd();
}
inline void CfgInfoResp::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void CfgInfoResp::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoResp.fd)
}

// int32 req_begin_time = 4;
inline void CfgInfoResp::clear_req_begin_time() {
  req_begin_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoResp::_internal_req_begin_time() const {
  return req_begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CfgInfoResp::req_begin_time() const {
  // @@protoc_insertion_point(field_get:pb.CfgInfoResp.req_begin_time)
  return _internal_req_begin_time();
}
inline void CfgInfoResp::_internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_begin_time_ = value;
}
inline void CfgInfoResp::set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_begin_time(value);
  // @@protoc_insertion_point(field_set:pb.CfgInfoResp.req_begin_time)
}

// -------------------------------------------------------------------

// LogInfo

// string gns_name = 1;
inline void LogInfo::clear_gns_name() {
  gns_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogInfo::gns_name() const {
  // @@protoc_insertion_point(field_get:pb.LogInfo.gns_name)
  return _internal_gns_name();
}
inline void LogInfo::set_gns_name(const std::string& value) {
  _internal_set_gns_name(value);
  // @@protoc_insertion_point(field_set:pb.LogInfo.gns_name)
}
inline std::string* LogInfo::mutable_gns_name() {
  // @@protoc_insertion_point(field_mutable:pb.LogInfo.gns_name)
  return _internal_mutable_gns_name();
}
inline const std::string& LogInfo::_internal_gns_name() const {
  return gns_name_.GetNoArena();
}
inline void LogInfo::_internal_set_gns_name(const std::string& value) {
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogInfo::set_gns_name(std::string&& value) {
  
  gns_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LogInfo.gns_name)
}
inline void LogInfo::set_gns_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LogInfo.gns_name)
}
inline void LogInfo::set_gns_name(const char* value, size_t size) {
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LogInfo.gns_name)
}
inline std::string* LogInfo::_internal_mutable_gns_name() {
  
  return gns_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogInfo::release_gns_name() {
  // @@protoc_insertion_point(field_release:pb.LogInfo.gns_name)
  
  return gns_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogInfo::set_allocated_gns_name(std::string* gns_name) {
  if (gns_name != nullptr) {
    
  } else {
    
  }
  gns_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gns_name);
  // @@protoc_insertion_point(field_set_allocated:pb.LogInfo.gns_name)
}

// string ip_port = 2;
inline void LogInfo::clear_ip_port() {
  ip_port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogInfo::ip_port() const {
  // @@protoc_insertion_point(field_get:pb.LogInfo.ip_port)
  return _internal_ip_port();
}
inline void LogInfo::set_ip_port(const std::string& value) {
  _internal_set_ip_port(value);
  // @@protoc_insertion_point(field_set:pb.LogInfo.ip_port)
}
inline std::string* LogInfo::mutable_ip_port() {
  // @@protoc_insertion_point(field_mutable:pb.LogInfo.ip_port)
  return _internal_mutable_ip_port();
}
inline const std::string& LogInfo::_internal_ip_port() const {
  return ip_port_.GetNoArena();
}
inline void LogInfo::_internal_set_ip_port(const std::string& value) {
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogInfo::set_ip_port(std::string&& value) {
  
  ip_port_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LogInfo.ip_port)
}
inline void LogInfo::set_ip_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LogInfo.ip_port)
}
inline void LogInfo::set_ip_port(const char* value, size_t size) {
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LogInfo.ip_port)
}
inline std::string* LogInfo::_internal_mutable_ip_port() {
  
  return ip_port_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogInfo::release_ip_port() {
  // @@protoc_insertion_point(field_release:pb.LogInfo.ip_port)
  
  return ip_port_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogInfo::set_allocated_ip_port(std::string* ip_port) {
  if (ip_port != nullptr) {
    
  } else {
    
  }
  ip_port_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_port);
  // @@protoc_insertion_point(field_set_allocated:pb.LogInfo.ip_port)
}

// string session_id = 3;
inline void LogInfo::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogInfo::session_id() const {
  // @@protoc_insertion_point(field_get:pb.LogInfo.session_id)
  return _internal_session_id();
}
inline void LogInfo::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:pb.LogInfo.session_id)
}
inline std::string* LogInfo::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:pb.LogInfo.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& LogInfo::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void LogInfo::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogInfo::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LogInfo.session_id)
}
inline void LogInfo::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LogInfo.session_id)
}
inline void LogInfo::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LogInfo.session_id)
}
inline std::string* LogInfo::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogInfo::release_session_id() {
  // @@protoc_insertion_point(field_release:pb.LogInfo.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogInfo::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:pb.LogInfo.session_id)
}

// string log_text = 4;
inline void LogInfo::clear_log_text() {
  log_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogInfo::log_text() const {
  // @@protoc_insertion_point(field_get:pb.LogInfo.log_text)
  return _internal_log_text();
}
inline void LogInfo::set_log_text(const std::string& value) {
  _internal_set_log_text(value);
  // @@protoc_insertion_point(field_set:pb.LogInfo.log_text)
}
inline std::string* LogInfo::mutable_log_text() {
  // @@protoc_insertion_point(field_mutable:pb.LogInfo.log_text)
  return _internal_mutable_log_text();
}
inline const std::string& LogInfo::_internal_log_text() const {
  return log_text_.GetNoArena();
}
inline void LogInfo::_internal_set_log_text(const std::string& value) {
  
  log_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogInfo::set_log_text(std::string&& value) {
  
  log_text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LogInfo.log_text)
}
inline void LogInfo::set_log_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LogInfo.log_text)
}
inline void LogInfo::set_log_text(const char* value, size_t size) {
  
  log_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LogInfo.log_text)
}
inline std::string* LogInfo::_internal_mutable_log_text() {
  
  return log_text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogInfo::release_log_text() {
  // @@protoc_insertion_point(field_release:pb.LogInfo.log_text)
  
  return log_text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogInfo::set_allocated_log_text(std::string* log_text) {
  if (log_text != nullptr) {
    
  } else {
    
  }
  log_text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_text);
  // @@protoc_insertion_point(field_set_allocated:pb.LogInfo.log_text)
}

// -------------------------------------------------------------------

// GetLogReq

// string session_id = 1;
inline void GetLogReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLogReq::session_id() const {
  // @@protoc_insertion_point(field_get:pb.GetLogReq.session_id)
  return _internal_session_id();
}
inline void GetLogReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:pb.GetLogReq.session_id)
}
inline std::string* GetLogReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:pb.GetLogReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& GetLogReq::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void GetLogReq::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLogReq::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GetLogReq.session_id)
}
inline void GetLogReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GetLogReq.session_id)
}
inline void GetLogReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GetLogReq.session_id)
}
inline std::string* GetLogReq::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLogReq::release_session_id() {
  // @@protoc_insertion_point(field_release:pb.GetLogReq.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLogReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:pb.GetLogReq.session_id)
}

// string gns_name = 2;
inline void GetLogReq::clear_gns_name() {
  gns_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLogReq::gns_name() const {
  // @@protoc_insertion_point(field_get:pb.GetLogReq.gns_name)
  return _internal_gns_name();
}
inline void GetLogReq::set_gns_name(const std::string& value) {
  _internal_set_gns_name(value);
  // @@protoc_insertion_point(field_set:pb.GetLogReq.gns_name)
}
inline std::string* GetLogReq::mutable_gns_name() {
  // @@protoc_insertion_point(field_mutable:pb.GetLogReq.gns_name)
  return _internal_mutable_gns_name();
}
inline const std::string& GetLogReq::_internal_gns_name() const {
  return gns_name_.GetNoArena();
}
inline void GetLogReq::_internal_set_gns_name(const std::string& value) {
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLogReq::set_gns_name(std::string&& value) {
  
  gns_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GetLogReq.gns_name)
}
inline void GetLogReq::set_gns_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GetLogReq.gns_name)
}
inline void GetLogReq::set_gns_name(const char* value, size_t size) {
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GetLogReq.gns_name)
}
inline std::string* GetLogReq::_internal_mutable_gns_name() {
  
  return gns_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLogReq::release_gns_name() {
  // @@protoc_insertion_point(field_release:pb.GetLogReq.gns_name)
  
  return gns_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLogReq::set_allocated_gns_name(std::string* gns_name) {
  if (gns_name != nullptr) {
    
  } else {
    
  }
  gns_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gns_name);
  // @@protoc_insertion_point(field_set_allocated:pb.GetLogReq.gns_name)
}

// string ip_port = 3;
inline void GetLogReq::clear_ip_port() {
  ip_port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLogReq::ip_port() const {
  // @@protoc_insertion_point(field_get:pb.GetLogReq.ip_port)
  return _internal_ip_port();
}
inline void GetLogReq::set_ip_port(const std::string& value) {
  _internal_set_ip_port(value);
  // @@protoc_insertion_point(field_set:pb.GetLogReq.ip_port)
}
inline std::string* GetLogReq::mutable_ip_port() {
  // @@protoc_insertion_point(field_mutable:pb.GetLogReq.ip_port)
  return _internal_mutable_ip_port();
}
inline const std::string& GetLogReq::_internal_ip_port() const {
  return ip_port_.GetNoArena();
}
inline void GetLogReq::_internal_set_ip_port(const std::string& value) {
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLogReq::set_ip_port(std::string&& value) {
  
  ip_port_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GetLogReq.ip_port)
}
inline void GetLogReq::set_ip_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GetLogReq.ip_port)
}
inline void GetLogReq::set_ip_port(const char* value, size_t size) {
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GetLogReq.ip_port)
}
inline std::string* GetLogReq::_internal_mutable_ip_port() {
  
  return ip_port_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLogReq::release_ip_port() {
  // @@protoc_insertion_point(field_release:pb.GetLogReq.ip_port)
  
  return ip_port_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLogReq::set_allocated_ip_port(std::string* ip_port) {
  if (ip_port != nullptr) {
    
  } else {
    
  }
  ip_port_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_port);
  // @@protoc_insertion_point(field_set_allocated:pb.GetLogReq.ip_port)
}

// int32 seq = 4;
inline void GetLogReq::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogReq::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogReq::seq() const {
  // @@protoc_insertion_point(field_get:pb.GetLogReq.seq)
  return _internal_seq();
}
inline void GetLogReq::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void GetLogReq::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:pb.GetLogReq.seq)
}

// int32 fd = 5;
inline void GetLogReq::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogReq::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogReq::fd() const {
  // @@protoc_insertion_point(field_get:pb.GetLogReq.fd)
  return _internal_fd();
}
inline void GetLogReq::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void GetLogReq::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:pb.GetLogReq.fd)
}

// int32 req_begin_time = 6;
inline void GetLogReq::clear_req_begin_time() {
  req_begin_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogReq::_internal_req_begin_time() const {
  return req_begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogReq::req_begin_time() const {
  // @@protoc_insertion_point(field_get:pb.GetLogReq.req_begin_time)
  return _internal_req_begin_time();
}
inline void GetLogReq::_internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_begin_time_ = value;
}
inline void GetLogReq::set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_begin_time(value);
  // @@protoc_insertion_point(field_set:pb.GetLogReq.req_begin_time)
}

// -------------------------------------------------------------------

// GetLogRespOld

// int32 ret = 1;
inline void GetLogRespOld::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogRespOld::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogRespOld::ret() const {
  // @@protoc_insertion_point(field_get:pb.GetLogRespOld.ret)
  return _internal_ret();
}
inline void GetLogRespOld::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GetLogRespOld::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:pb.GetLogRespOld.ret)
}

// string ret_msg = 2;
inline void GetLogRespOld::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLogRespOld::ret_msg() const {
  // @@protoc_insertion_point(field_get:pb.GetLogRespOld.ret_msg)
  return _internal_ret_msg();
}
inline void GetLogRespOld::set_ret_msg(const std::string& value) {
  _internal_set_ret_msg(value);
  // @@protoc_insertion_point(field_set:pb.GetLogRespOld.ret_msg)
}
inline std::string* GetLogRespOld::mutable_ret_msg() {
  // @@protoc_insertion_point(field_mutable:pb.GetLogRespOld.ret_msg)
  return _internal_mutable_ret_msg();
}
inline const std::string& GetLogRespOld::_internal_ret_msg() const {
  return ret_msg_.GetNoArena();
}
inline void GetLogRespOld::_internal_set_ret_msg(const std::string& value) {
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLogRespOld::set_ret_msg(std::string&& value) {
  
  ret_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GetLogRespOld.ret_msg)
}
inline void GetLogRespOld::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GetLogRespOld.ret_msg)
}
inline void GetLogRespOld::set_ret_msg(const char* value, size_t size) {
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GetLogRespOld.ret_msg)
}
inline std::string* GetLogRespOld::_internal_mutable_ret_msg() {
  
  return ret_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLogRespOld::release_ret_msg() {
  // @@protoc_insertion_point(field_release:pb.GetLogRespOld.ret_msg)
  
  return ret_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLogRespOld::set_allocated_ret_msg(std::string* ret_msg) {
  if (ret_msg != nullptr) {
    
  } else {
    
  }
  ret_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.GetLogRespOld.ret_msg)
}

// string log_text = 3;
inline void GetLogRespOld::clear_log_text() {
  log_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLogRespOld::log_text() const {
  // @@protoc_insertion_point(field_get:pb.GetLogRespOld.log_text)
  return _internal_log_text();
}
inline void GetLogRespOld::set_log_text(const std::string& value) {
  _internal_set_log_text(value);
  // @@protoc_insertion_point(field_set:pb.GetLogRespOld.log_text)
}
inline std::string* GetLogRespOld::mutable_log_text() {
  // @@protoc_insertion_point(field_mutable:pb.GetLogRespOld.log_text)
  return _internal_mutable_log_text();
}
inline const std::string& GetLogRespOld::_internal_log_text() const {
  return log_text_.GetNoArena();
}
inline void GetLogRespOld::_internal_set_log_text(const std::string& value) {
  
  log_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLogRespOld::set_log_text(std::string&& value) {
  
  log_text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GetLogRespOld.log_text)
}
inline void GetLogRespOld::set_log_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GetLogRespOld.log_text)
}
inline void GetLogRespOld::set_log_text(const char* value, size_t size) {
  
  log_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GetLogRespOld.log_text)
}
inline std::string* GetLogRespOld::_internal_mutable_log_text() {
  
  return log_text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLogRespOld::release_log_text() {
  // @@protoc_insertion_point(field_release:pb.GetLogRespOld.log_text)
  
  return log_text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLogRespOld::set_allocated_log_text(std::string* log_text) {
  if (log_text != nullptr) {
    
  } else {
    
  }
  log_text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_text);
  // @@protoc_insertion_point(field_set_allocated:pb.GetLogRespOld.log_text)
}

// int32 cur_len = 4;
inline void GetLogRespOld::clear_cur_len() {
  cur_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogRespOld::_internal_cur_len() const {
  return cur_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogRespOld::cur_len() const {
  // @@protoc_insertion_point(field_get:pb.GetLogRespOld.cur_len)
  return _internal_cur_len();
}
inline void GetLogRespOld::_internal_set_cur_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_len_ = value;
}
inline void GetLogRespOld::set_cur_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_len(value);
  // @@protoc_insertion_point(field_set:pb.GetLogRespOld.cur_len)
}

// int32 fd = 5;
inline void GetLogRespOld::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogRespOld::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogRespOld::fd() const {
  // @@protoc_insertion_point(field_get:pb.GetLogRespOld.fd)
  return _internal_fd();
}
inline void GetLogRespOld::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void GetLogRespOld::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:pb.GetLogRespOld.fd)
}

// int32 req_begin_time = 6;
inline void GetLogRespOld::clear_req_begin_time() {
  req_begin_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogRespOld::_internal_req_begin_time() const {
  return req_begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogRespOld::req_begin_time() const {
  // @@protoc_insertion_point(field_get:pb.GetLogRespOld.req_begin_time)
  return _internal_req_begin_time();
}
inline void GetLogRespOld::_internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_begin_time_ = value;
}
inline void GetLogRespOld::set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_begin_time(value);
  // @@protoc_insertion_point(field_set:pb.GetLogRespOld.req_begin_time)
}

// -------------------------------------------------------------------

// LogText

// string ip_port = 1;
inline void LogText::clear_ip_port() {
  ip_port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogText::ip_port() const {
  // @@protoc_insertion_point(field_get:pb.LogText.ip_port)
  return _internal_ip_port();
}
inline void LogText::set_ip_port(const std::string& value) {
  _internal_set_ip_port(value);
  // @@protoc_insertion_point(field_set:pb.LogText.ip_port)
}
inline std::string* LogText::mutable_ip_port() {
  // @@protoc_insertion_point(field_mutable:pb.LogText.ip_port)
  return _internal_mutable_ip_port();
}
inline const std::string& LogText::_internal_ip_port() const {
  return ip_port_.GetNoArena();
}
inline void LogText::_internal_set_ip_port(const std::string& value) {
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogText::set_ip_port(std::string&& value) {
  
  ip_port_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LogText.ip_port)
}
inline void LogText::set_ip_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LogText.ip_port)
}
inline void LogText::set_ip_port(const char* value, size_t size) {
  
  ip_port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LogText.ip_port)
}
inline std::string* LogText::_internal_mutable_ip_port() {
  
  return ip_port_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogText::release_ip_port() {
  // @@protoc_insertion_point(field_release:pb.LogText.ip_port)
  
  return ip_port_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogText::set_allocated_ip_port(std::string* ip_port) {
  if (ip_port != nullptr) {
    
  } else {
    
  }
  ip_port_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_port);
  // @@protoc_insertion_point(field_set_allocated:pb.LogText.ip_port)
}

// string gns_name = 2;
inline void LogText::clear_gns_name() {
  gns_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogText::gns_name() const {
  // @@protoc_insertion_point(field_get:pb.LogText.gns_name)
  return _internal_gns_name();
}
inline void LogText::set_gns_name(const std::string& value) {
  _internal_set_gns_name(value);
  // @@protoc_insertion_point(field_set:pb.LogText.gns_name)
}
inline std::string* LogText::mutable_gns_name() {
  // @@protoc_insertion_point(field_mutable:pb.LogText.gns_name)
  return _internal_mutable_gns_name();
}
inline const std::string& LogText::_internal_gns_name() const {
  return gns_name_.GetNoArena();
}
inline void LogText::_internal_set_gns_name(const std::string& value) {
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogText::set_gns_name(std::string&& value) {
  
  gns_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LogText.gns_name)
}
inline void LogText::set_gns_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LogText.gns_name)
}
inline void LogText::set_gns_name(const char* value, size_t size) {
  
  gns_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LogText.gns_name)
}
inline std::string* LogText::_internal_mutable_gns_name() {
  
  return gns_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogText::release_gns_name() {
  // @@protoc_insertion_point(field_release:pb.LogText.gns_name)
  
  return gns_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogText::set_allocated_gns_name(std::string* gns_name) {
  if (gns_name != nullptr) {
    
  } else {
    
  }
  gns_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gns_name);
  // @@protoc_insertion_point(field_set_allocated:pb.LogText.gns_name)
}

// repeated string text = 3;
inline int LogText::_internal_text_size() const {
  return text_.size();
}
inline int LogText::text_size() const {
  return _internal_text_size();
}
inline void LogText::clear_text() {
  text_.Clear();
}
inline std::string* LogText::add_text() {
  // @@protoc_insertion_point(field_add_mutable:pb.LogText.text)
  return _internal_add_text();
}
inline const std::string& LogText::_internal_text(int index) const {
  return text_.Get(index);
}
inline const std::string& LogText::text(int index) const {
  // @@protoc_insertion_point(field_get:pb.LogText.text)
  return _internal_text(index);
}
inline std::string* LogText::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LogText.text)
  return text_.Mutable(index);
}
inline void LogText::set_text(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb.LogText.text)
  text_.Mutable(index)->assign(value);
}
inline void LogText::set_text(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.LogText.text)
  text_.Mutable(index)->assign(std::move(value));
}
inline void LogText::set_text(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.LogText.text)
}
inline void LogText::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.LogText.text)
}
inline std::string* LogText::_internal_add_text() {
  return text_.Add();
}
inline void LogText::add_text(const std::string& value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.LogText.text)
}
inline void LogText::add_text(std::string&& value) {
  text_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.LogText.text)
}
inline void LogText::add_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.LogText.text)
}
inline void LogText::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.LogText.text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogText::text() const {
  // @@protoc_insertion_point(field_list:pb.LogText.text)
  return text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogText::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:pb.LogText.text)
  return &text_;
}

// -------------------------------------------------------------------

// GetLogResp

// int32 ret = 1;
inline void GetLogResp::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogResp::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogResp::ret() const {
  // @@protoc_insertion_point(field_get:pb.GetLogResp.ret)
  return _internal_ret();
}
inline void GetLogResp::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void GetLogResp::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:pb.GetLogResp.ret)
}

// string ret_msg = 2;
inline void GetLogResp::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLogResp::ret_msg() const {
  // @@protoc_insertion_point(field_get:pb.GetLogResp.ret_msg)
  return _internal_ret_msg();
}
inline void GetLogResp::set_ret_msg(const std::string& value) {
  _internal_set_ret_msg(value);
  // @@protoc_insertion_point(field_set:pb.GetLogResp.ret_msg)
}
inline std::string* GetLogResp::mutable_ret_msg() {
  // @@protoc_insertion_point(field_mutable:pb.GetLogResp.ret_msg)
  return _internal_mutable_ret_msg();
}
inline const std::string& GetLogResp::_internal_ret_msg() const {
  return ret_msg_.GetNoArena();
}
inline void GetLogResp::_internal_set_ret_msg(const std::string& value) {
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLogResp::set_ret_msg(std::string&& value) {
  
  ret_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GetLogResp.ret_msg)
}
inline void GetLogResp::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GetLogResp.ret_msg)
}
inline void GetLogResp::set_ret_msg(const char* value, size_t size) {
  
  ret_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GetLogResp.ret_msg)
}
inline std::string* GetLogResp::_internal_mutable_ret_msg() {
  
  return ret_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLogResp::release_ret_msg() {
  // @@protoc_insertion_point(field_release:pb.GetLogResp.ret_msg)
  
  return ret_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLogResp::set_allocated_ret_msg(std::string* ret_msg) {
  if (ret_msg != nullptr) {
    
  } else {
    
  }
  ret_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:pb.GetLogResp.ret_msg)
}

// int32 fd = 3;
inline void GetLogResp::clear_fd() {
  fd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogResp::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogResp::fd() const {
  // @@protoc_insertion_point(field_get:pb.GetLogResp.fd)
  return _internal_fd();
}
inline void GetLogResp::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fd_ = value;
}
inline void GetLogResp::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:pb.GetLogResp.fd)
}

// int32 req_begin_time = 4;
inline void GetLogResp::clear_req_begin_time() {
  req_begin_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogResp::_internal_req_begin_time() const {
  return req_begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLogResp::req_begin_time() const {
  // @@protoc_insertion_point(field_get:pb.GetLogResp.req_begin_time)
  return _internal_req_begin_time();
}
inline void GetLogResp::_internal_set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_begin_time_ = value;
}
inline void GetLogResp::set_req_begin_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_begin_time(value);
  // @@protoc_insertion_point(field_set:pb.GetLogResp.req_begin_time)
}

// repeated .pb.LogText log_text = 5;
inline int GetLogResp::_internal_log_text_size() const {
  return log_text_.size();
}
inline int GetLogResp::log_text_size() const {
  return _internal_log_text_size();
}
inline void GetLogResp::clear_log_text() {
  log_text_.Clear();
}
inline ::pb::LogText* GetLogResp::mutable_log_text(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GetLogResp.log_text)
  return log_text_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogText >*
GetLogResp::mutable_log_text() {
  // @@protoc_insertion_point(field_mutable_list:pb.GetLogResp.log_text)
  return &log_text_;
}
inline const ::pb::LogText& GetLogResp::_internal_log_text(int index) const {
  return log_text_.Get(index);
}
inline const ::pb::LogText& GetLogResp::log_text(int index) const {
  // @@protoc_insertion_point(field_get:pb.GetLogResp.log_text)
  return _internal_log_text(index);
}
inline ::pb::LogText* GetLogResp::_internal_add_log_text() {
  return log_text_.Add();
}
inline ::pb::LogText* GetLogResp::add_log_text() {
  // @@protoc_insertion_point(field_add:pb.GetLogResp.log_text)
  return _internal_add_log_text();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogText >&
GetLogResp::log_text() const {
  // @@protoc_insertion_point(field_list:pb.GetLogResp.log_text)
  return log_text_;
}

// -------------------------------------------------------------------

// HeartBeatMsg

// string reserve = 1;
inline void HeartBeatMsg::clear_reserve() {
  reserve_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HeartBeatMsg::reserve() const {
  // @@protoc_insertion_point(field_get:pb.HeartBeatMsg.reserve)
  return _internal_reserve();
}
inline void HeartBeatMsg::set_reserve(const std::string& value) {
  _internal_set_reserve(value);
  // @@protoc_insertion_point(field_set:pb.HeartBeatMsg.reserve)
}
inline std::string* HeartBeatMsg::mutable_reserve() {
  // @@protoc_insertion_point(field_mutable:pb.HeartBeatMsg.reserve)
  return _internal_mutable_reserve();
}
inline const std::string& HeartBeatMsg::_internal_reserve() const {
  return reserve_.GetNoArena();
}
inline void HeartBeatMsg::_internal_set_reserve(const std::string& value) {
  
  reserve_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HeartBeatMsg::set_reserve(std::string&& value) {
  
  reserve_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.HeartBeatMsg.reserve)
}
inline void HeartBeatMsg::set_reserve(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reserve_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.HeartBeatMsg.reserve)
}
inline void HeartBeatMsg::set_reserve(const char* value, size_t size) {
  
  reserve_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.HeartBeatMsg.reserve)
}
inline std::string* HeartBeatMsg::_internal_mutable_reserve() {
  
  return reserve_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HeartBeatMsg::release_reserve() {
  // @@protoc_insertion_point(field_release:pb.HeartBeatMsg.reserve)
  
  return reserve_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatMsg::set_allocated_reserve(std::string* reserve) {
  if (reserve != nullptr) {
    
  } else {
    
  }
  reserve_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve);
  // @@protoc_insertion_point(field_set_allocated:pb.HeartBeatMsg.reserve)
}

// -------------------------------------------------------------------

// ClearSessionReq

// string session_id = 1;
inline void ClearSessionReq::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClearSessionReq::session_id() const {
  // @@protoc_insertion_point(field_get:pb.ClearSessionReq.session_id)
  return _internal_session_id();
}
inline void ClearSessionReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:pb.ClearSessionReq.session_id)
}
inline std::string* ClearSessionReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:pb.ClearSessionReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& ClearSessionReq::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void ClearSessionReq::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClearSessionReq::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ClearSessionReq.session_id)
}
inline void ClearSessionReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ClearSessionReq.session_id)
}
inline void ClearSessionReq::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ClearSessionReq.session_id)
}
inline std::string* ClearSessionReq::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClearSessionReq::release_session_id() {
  // @@protoc_insertion_point(field_release:pb.ClearSessionReq.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClearSessionReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:pb.ClearSessionReq.session_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trace_2eproto
